{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","state","editMode","status","props","activateEditMode","setState","deActivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","this","onChange","onBlur","autoFocus","onDoubleClick","React","Component","ProfileInfo","profile","className","s","descriptionblock","src","photos","large","alt","userId","Preloader","Post","item","message","likeCount","maxLength","maxLengthCreator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","MyPosts","memo","postsElements","postsData","map","t","id","postsBlock","formData","addPost","newPostBody","posts","MyPostsContainer","connect","profilePage","dispatch","Profile","ProfileContainer","match","params","String","authorizedUserId","getUserProfile","getUserStatus","compose","auth","data","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.654ae9cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentBackground\":\"ProfileInfo_contentBackground__3NTUq\",\"descriptionblock\":\"ProfileInfo_descriptionblock__1iDgo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__kSILv\",\"posts\":\"MyPosts_posts__1mxel\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1dLyP\"};","import React, { ChangeEvent } from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n  status: string\r\n  updateUserStatus: (userId: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n\r\n  state = {\r\n    editMode: false,\r\n    status: this.props.status\r\n  };\r\n\r\n  activateEditMode = () => {\r\n    this.setState({\r\n      editMode: true\r\n    });\r\n  };\r\n\r\n  deActivateEditMode = () => {\r\n    this.setState({\r\n      editMode: false\r\n    });\r\n    this.props.updateUserStatus(this.state.status);\r\n  };\r\n\r\n  onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      status: e.currentTarget.value\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>) {\r\n    if (prevProps.status !== this.props.status) {\r\n      this.setState({\r\n        status: this.props.status\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.editMode\r\n          ? <div>\r\n            <input\r\n              onChange={this.onStatusChange}\r\n              value={this.state.status}\r\n              onBlur={this.deActivateEditMode}\r\n              autoFocus/>\r\n          </div>\r\n          : <div>\r\n            <span onDoubleClick={this.activateEditMode}>{this.props.status || '-----'}</span>\r\n          </div>}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport { Preloader } from '../../common/Preloader';\r\nimport { UserProfileType } from '../../../redux/profile-reducer';\r\nimport { ProfileStatus } from './ProfileStatus';\r\n\r\ntype ProfileInfoPropsType = {\r\n  profile: UserProfileType\r\n  status: string\r\n  updateUserStatus: (userId: string) => void\r\n}\r\n\r\nexport function ProfileInfo(props: ProfileInfoPropsType) {\r\n  const { status, profile, updateUserStatus } = props;\r\n\r\n  if (!profile) {\r\n    return <Preloader/>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionblock}>\r\n        <img src={profile.photos.large} alt=\"\"/>\r\n        <ProfileStatus\r\n          status={status}\r\n          updateUserStatus={updateUserStatus}/>\r\n        ava + {profile.userId}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n","import s from \"./Post.module.css\";\r\nimport React from \"react\";\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likeCount: number\r\n}\r\n\r\nexport function Post(props: PostType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://twt-thumbs.washtimes.com/media/image/2015/10/20/Rowan_Atkinson_c0-269-1200-968_s885x516.jpg?73654bfb353205d8a409d0b97a2183fbcb215332' alt=\"\"/>\r\n            <span>{props.message}</span>\r\n            <div>\r\n                <span>like </span>{props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import { maxLengthCreator, requiredField } from '../../../../helpers/validators/validators';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../../common/FormsControls';\r\nimport React from 'react';\r\n\r\nexport type AddPostFormPropsType = {\r\n  newPostBody: string\r\n}\r\nconst maxLength = maxLengthCreator(30);\r\nconst AddNewPostForm = (props: InjectedFormProps<AddPostFormPropsType>) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name='newPostBody'\r\n          placeholder='Enter Your post'\r\n          validate={[requiredField, maxLength]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport const AddPostReduxForm = reduxForm<AddPostFormPropsType>({ form: 'profileAddPostForm' })(AddNewPostForm);","import s from './MyPosts.module.css';\r\nimport React from 'react';\r\nimport { Post } from './Post/Post';\r\nimport { PostsDataType } from '../../../redux/profile-reducer';\r\nimport { AddPostFormPropsType, AddPostReduxForm } from './AddNewPostForm/AddNewPostForm';\r\n\r\ntype MyPostsPropsType = {\r\n  addPost: (newPostBody: string) => void\r\n  postsData: PostsDataType[]\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n  const postsElements = props.postsData.map(t => <Post key={t.id} message={t.message}\r\n                                                                   likeCount={t.likeCount}/>);\r\n\r\n  const addPost = (formData: AddPostFormPropsType) => {\r\n    props.addPost(formData.newPostBody);\r\n  };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostReduxForm onSubmit={addPost}/>\r\n      <div className={s.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n","import { addPost, PostsDataType } from '../../../redux/profile-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { MyPosts } from './MyPosts';\r\nimport { connect } from 'react-redux';\r\nimport { StateType } from '../../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n  postsData: PostsDataType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n  addPost: (newPostBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n  return {\r\n    postsData: state.profilePage.postsData\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n  return {\r\n    addPost: (newPostBody: string) => {\r\n      dispatch(addPost(newPostBody));\r\n    }\r\n  };\r\n};\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: UserProfileType\r\n    status: string\r\n    updateUserStatus: (userId: string) => void\r\n}\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n\r\n}","import React, { ComponentType } from 'react';\r\nimport { Profile } from './Profile';\r\nimport { StateType } from '../../redux/redux-store';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getUserStatus, updateUserStatus, UserProfileType } from '../../redux/profile-reducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & PropsType\r\n\r\ntype MapStateToPropsType = {\r\n  profile: UserProfileType\r\n  status: string\r\n  authorizedUserId: number | null\r\n  isAuth: boolean\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & {\r\n  getUserProfile: (userId: string) => void\r\n  getUserStatus: (userId: string) => void\r\n  updateUserStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n  componentDidMount(): void {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = String(this.props.authorizedUserId);\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getUserStatus(userId);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Profile\r\n          profile={this.props.profile}\r\n          status={this.props.status}\r\n          updateUserStatus={this.props.updateUserStatus}/>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.data.id,\r\n    isAuth: state.auth.isAuth\r\n  };\r\n};\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n"],"sourceRoot":""}