{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogsContainer.ts","components/Dialogs/Dialogs.tsx"],"names":["module","exports","DialogItem","props","path","state","id","className","s","dialog","activeClassName","active","to","src","picture","alt","name","Message","message","maxLength","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","compose","connect","dialogsPage","dispatch","sendMessage","newMessageBody","addMessage","withAuthRedirect","dialogs","dialogItems","dialogsData","map","t","messages","messagesData","formData"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6FCQ1M,SAASC,EAAWC,GACvB,IAAIC,EAAe,YAAcD,EAAME,MAAMC,GAC7C,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,eAAC,IAAD,CAASC,gBAAiBF,IAAEG,OAAQC,GAAIR,EAAxC,UAA8C,qBAAKS,IAAKV,EAAME,MAAMS,QAASC,IAAI,KAAKZ,EAAME,MAAMW,UCLvG,SAASC,EAAQd,GACpB,OACI,qBAAKI,UAAWC,IAAEU,QAAlB,SACKf,EAAMe,U,qCCHbC,EAAYC,YAAiB,IAoBtBC,EAAsBC,YAAmC,CACpEC,KAAM,wBAD2BD,EAlBZ,SAACnB,GAEtB,OACE,uBAAMqB,SAAUrB,EAAMsB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXZ,KAAK,iBACLa,YAAY,qBACZC,SAAU,CAACC,IAAeZ,OAG9B,8BACE,yD,4BCKOa,sBACXC,aAdoB,SAAC5B,GACrB,MAAO,CACH6B,YAAa7B,EAAM6B,gBAGA,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAAWD,SAO5BE,IAFWP,ECfR,SAAiB7B,GAQtB,OACE,sBAAKI,UAAWC,IAAEgC,QAAlB,UACE,qBAAKjC,UAAWC,IAAEiC,YAAlB,SACGtC,EAAM+B,YAAYQ,YAAYC,KAAI,SAAAC,GAAC,OAAI,cAAC1C,EAAD,CAAuBG,MAAOuC,GAAbA,EAAEtC,SAE7D,gCACE,qBAAKC,UAAWC,IAAEqC,SAAlB,SACG1C,EAAM+B,YAAYY,aAAaH,KAAI,SAAAC,GAAC,OAAI,cAAC3B,EAAD,CAAoBC,QAAS0B,EAAE1B,SAAjB0B,EAAEtC,SAE3D,cAACe,EAAD,CAAqBG,SAfT,SAACuB,GACjB5C,EAAMiC,YAAYW,EAASV","file":"static/js/4.052ecb34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2HlaX\",\"dialogItems\":\"Dialogs_dialogItems__2Nm5L\",\"dialog\":\"Dialogs_dialog__SfNFC\",\"active\":\"Dialogs_active__3zl5o\",\"messages\":\"Dialogs_messages__3utum\",\"message\":\"Dialogs_message__2BubX\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./../Dialogs.module.css\"\r\nimport {DialogsDataType} from \"../../../redux/dialogs-reducer\";\r\n\r\ntype DialoggItemPropsType = {\r\n    state: DialogsDataType\r\n}\r\n\r\nexport function DialogItem(props: DialoggItemPropsType) {\r\n    let path: string = \"/dialogs/\" + props.state.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink activeClassName={s.active} to={path}><img src={props.state.picture} alt=\"\"/>{props.state.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nexport function Message(props: MessageType) {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n\r\n}","import { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../common/FormsControls';\r\nimport { maxLengthCreator, requiredField } from '../../../helpers/validators/validators';\r\nimport React from 'react';\r\n\r\nexport type AddMessageFormPropsType = {\r\n  newMessageBody: string\r\n}\r\nconst maxLength = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<AddMessageFormPropsType>) => {\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name='newMessageBody'\r\n          placeholder='Enter your message'\r\n          validate={[requiredField, maxLength]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add message</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport const AddMessageReduxForm = reduxForm<AddMessageFormPropsType>({\r\n  form: 'dialogAddMessageForm'\r\n})(AddMessageForm);","import {addMessage, DialogsType} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch, compose} from \"redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (value: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(addMessage(newMessageBody));\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n","import React from 'react';\r\nimport { DialogItem } from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport { Message } from './Message/Message';\r\nimport { DialogsType } from '../../redux/dialogs-reducer';\r\nimport { AddMessageFormPropsType, AddMessageReduxForm } from './AddMessageForm/AddMessageForm';\r\n\r\ntype DialogsPropsType = {\r\n  sendMessage: (value: string) => void\r\n  dialogsPage: DialogsType\r\n  isAuth: boolean\r\n}\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n\r\n  let sendMessage = (formData: AddMessageFormPropsType) => {\r\n    props.sendMessage(formData.newMessageBody);\r\n  };\r\n\r\n  //if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogItems}>\r\n        {props.dialogsPage.dialogsData.map(t => <DialogItem key={t.id} state={t}/>)}\r\n      </div>\r\n      <div>\r\n        <div className={s.messages}>\r\n          {props.dialogsPage.messagesData.map(t => <Message key={t.id} message={t.message}/>)}\r\n        </div>\r\n        <AddMessageReduxForm onSubmit={sendMessage}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}